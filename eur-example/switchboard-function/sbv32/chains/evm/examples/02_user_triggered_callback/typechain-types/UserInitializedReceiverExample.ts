/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface UserInitializedReceiverExampleInterface
  extends utils.Interface {
  functions: {
    "EXPECTED_FUNCTION_GAS_COST()": FunctionFragment;
    "createOrder()": FunctionFragment;
    "fillOrder(uint256,uint256)": FunctionFragment;
    "latestValue()": FunctionFragment;
    "orders(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EXPECTED_FUNCTION_GAS_COST"
      | "createOrder"
      | "fillOrder"
      | "latestValue"
      | "orders"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EXPECTED_FUNCTION_GAS_COST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "latestValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "EXPECTED_FUNCTION_GAS_COST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;

  events: {
    "OrderCreated(uint256,address,address)": EventFragment;
    "OrderResolved(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderResolved"): EventFragment;
}

export interface OrderCreatedEventObject {
  orderId: BigNumber;
  callId: string;
  sender: string;
}
export type OrderCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  OrderCreatedEventObject
>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export interface OrderResolvedEventObject {
  orderId: BigNumber;
  callId: string;
  value: BigNumber;
}
export type OrderResolvedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  OrderResolvedEventObject
>;

export type OrderResolvedEventFilter = TypedEventFilter<OrderResolvedEvent>;

export interface UserInitializedReceiverExample extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UserInitializedReceiverExampleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EXPECTED_FUNCTION_GAS_COST(overrides?: CallOverrides): Promise<[BigNumber]>;

    createOrder(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillOrder(
      orderId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    latestValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean] & {
        callId: string;
        sender: string;
        value: BigNumber;
        filled: boolean;
      }
    >;
  };

  EXPECTED_FUNCTION_GAS_COST(overrides?: CallOverrides): Promise<BigNumber>;

  createOrder(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillOrder(
    orderId: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  latestValue(overrides?: CallOverrides): Promise<BigNumber>;

  orders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean] & {
      callId: string;
      sender: string;
      value: BigNumber;
      filled: boolean;
    }
  >;

  callStatic: {
    EXPECTED_FUNCTION_GAS_COST(overrides?: CallOverrides): Promise<BigNumber>;

    createOrder(overrides?: CallOverrides): Promise<void>;

    fillOrder(
      orderId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    latestValue(overrides?: CallOverrides): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean] & {
        callId: string;
        sender: string;
        value: BigNumber;
        filled: boolean;
      }
    >;
  };

  filters: {
    "OrderCreated(uint256,address,address)"(
      orderId?: null,
      callId?: null,
      sender?: null
    ): OrderCreatedEventFilter;
    OrderCreated(
      orderId?: null,
      callId?: null,
      sender?: null
    ): OrderCreatedEventFilter;

    "OrderResolved(uint256,address,uint256)"(
      orderId?: null,
      callId?: null,
      value?: null
    ): OrderResolvedEventFilter;
    OrderResolved(
      orderId?: null,
      callId?: null,
      value?: null
    ): OrderResolvedEventFilter;
  };

  estimateGas: {
    EXPECTED_FUNCTION_GAS_COST(overrides?: CallOverrides): Promise<BigNumber>;

    createOrder(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillOrder(
      orderId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    latestValue(overrides?: CallOverrides): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EXPECTED_FUNCTION_GAS_COST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createOrder(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillOrder(
      orderId: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    latestValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
