[
  "error InitializationFunctionReverted(address,bytes)",
  "error ACLAdminAlreadyInitialized()",
  "error ACLNotAdmin(address)",
  "function initialize()",
  "function isAdmin(address) view returns (bool)",
  "function isAllowed(address) view returns (bool)",
  "function setAdmin(address,bool)",
  "function setAllowed(address,bool)",
  "error ACLNotAllowed(address)",
  "error AggregatorAlreadyExists(address)",
  "error AggregatorDoesNotExist(address)",
  "error EarlyOracleResponse(address)",
  "error ExcessiveGasSpent(uint256,uint256)",
  "error InsufficientBalance(uint256,uint256)",
  "error InsufficientSamples(uint256,uint256)",
  "error IntervalHistoryNotRecorded(address)",
  "error InvalidAuthority(address,address)",
  "error InvalidEntry()",
  "error OracleExpired(address)",
  "error QueuesDoNotMatch(address,address)",
  "error SubmittedResultsMismatch(uint256,uint256)",
  "event AggregatorAccountInit(address indexed,address indexed,uint256)",
  "event AggregatorFundEvent(address indexed,address indexed,uint256 indexed)",
  "event AggregatorIntervalRefreshed(address indexed,uint256 indexed,uint256 indexed)",
  "event AggregatorOpenInterval(address indexed,uint256 indexed)",
  "event AggregatorRead(address indexed,address indexed,int256)",
  "event AggregatorSaveResult(address indexed,address indexed,int256 indexed)",
  "event AggregatorSettingsUpdated(address indexed,uint256,uint256,uint256,uint256,uint256)",
  "event AggregatorUpdate(address indexed,int256 indexed,uint256)",
  "event AggregatorWithdrawEvent(address indexed,address indexed,uint256 indexed)",
  "event OraclePayoutEvent(address indexed,address indexed,uint256 indexed)",
  "function aggregatorEscrowFund(address) payable",
  "function aggregatorEscrowWithdraw(address,address,uint256)",
  "function aggregatorHistory(address,uint80) view returns (tuple(int256,uint256,uint256))",
  "function aggregators(address) view returns (tuple(string,address,tuple(int256,uint256,address),tuple(uint256,uint256,uint256,uint256,uint256,uint256),string,address,uint256,uint256,uint80,uint256,bool))",
  "function createAggregator(string,address,uint256,uint256,uint256,string,address,uint256,uint256,uint256,bool) payable",
  "function getAggregatorsByAuthority(address) view returns (address[], tuple(string,address,tuple(int256,uint256,address),tuple(uint256,uint256,uint256,uint256,uint256,uint256),string,address,uint256,uint256,uint80,uint256,bool)[])",
  "function getAllAggregators() view returns (address[], tuple(string,address,tuple(int256,uint256,address),tuple(uint256,uint256,uint256,uint256,uint256,uint256),string,address,uint256,uint256,uint80,uint256,bool)[])",
  "function getCurrentIntervalId(address) view returns (uint80)",
  "function getIntervalResult(address,uint80) returns (int256, uint256, uint256)",
  "function latestResult(address) returns (int256, uint256)",
  "function openInterval(address) payable",
  "function saveResults(address[],int256[],address,uint256)",
  "function setAggregatorConfig(address,string,address,uint256,uint256,uint256,string,address,uint256,uint256,uint256,bool)",
  "function viewAggregatorResults(address) view returns (tuple(int256,uint256,address)[])",
  "function viewLatestResult(address) view returns (int256, uint256)",
  "error AttestationQueueAlreadyExists(address)",
  "error InvalidArgument(uint256)",
  "error MrEnclaveNotAllowed(address,bytes32)",
  "event AddMrEnclave(address indexed,bytes32)",
  "event AttestationQueueAccountInit(address indexed,address indexed)",
  "event AttestationQueuePermissionUpdated(address indexed,address indexed,address indexed,uint256)",
  "event AttestationQueueSetConfig(address indexed,address indexed)",
  "event RemoveMrEnclave(address indexed,bytes32)",
  "function addMrEnclaveToAttestationQueue(address,bytes32)",
  "function attestationQueueHasMrEnclave(address,bytes32) view returns (bool)",
  "function attestationQueues(address) view returns (tuple(address,address[],uint256,uint256,uint256,bytes32[],uint256,uint256,uint256,bool,bool,uint256,uint256,uint256))",
  "function createAttestationQueue(address,uint256,uint256,uint256,uint256,uint256,bool,bool,uint256)",
  "function getAttestationQueueMrEnclaves(address) view returns (bytes32[])",
  "function getEnclaveIdx(address) view returns (int256)",
  "function getEnclaves(address) view returns (address[])",
  "function removeMrEnclaveFromAttestationQueue(address,bytes32)",
  "function setAttestationQueueConfig(address,address,uint256,uint256,uint256,uint256,uint256,bool,bool,uint256)",
  "function setAttestationQueuePermission(address,address,uint256,bool)",
  "event DiamondCut(tuple(address,uint8,bytes4[])[],address,bytes)",
  "function diamondCut(tuple(address,uint8,bytes4[])[],address,bytes)",
  "function facetAddress(bytes4) view returns (address)",
  "function facetAddresses() view returns (address[])",
  "function facetFunctionSelectors(address) view returns (bytes4[])",
  "function facets() view returns (tuple(address,bytes4[])[])",
  "function supportsInterface(bytes4) view returns (bool)",
  "event OwnershipTransferred(address indexed,address indexed)",
  "function owner() view returns (address)",
  "function transferOwnership(address)",
  "function init()",
  "error EnclaveAlreadyExists(address)",
  "error EnclaveDoesNotExist(address)",
  "error EnclaveExpired(address)",
  "error EnclaveNotAtQueueIdx(address,address,uint256)",
  "error EnclaveNotOnQueue(address,address)",
  "error EnclaveNotReadyForVerification(address)",
  "error EnclaveUnverified(address)",
  "error ForceOverrideNotReady(address)",
  "error IncorrectReportedTime(uint256,uint256)",
  "error InvalidEnclave(address)",
  "error InvalidSigner(address,address)",
  "error InvalidStatus(address,uint256,uint256)",
  "error PermissionDenied(address,address,uint256)",
  "event EnclaveAccountInit(address indexed,address indexed)",
  "event EnclaveGC(address indexed,address indexed)",
  "event EnclaveHeartbeat(address indexed,address indexed)",
  "event EnclavePayoutEvent(address indexed,address indexed,uint256 indexed)",
  "event EnclaveRotateSigner(address indexed,address indexed,address indexed)",
  "event EnclaveVerifyRequest(address indexed,address indexed,address indexed)",
  "function createEnclave(address,address,address)",
  "function createEnclaveWithId(address,address,address,address)",
  "function enclaveGarbageCollect(address,uint256)",
  "function enclaveHeartbeat(address)",
  "function enclaveSignerToEnclaveId(address) view returns (address)",
  "function enclaves(address) view returns (tuple(address,address,address,bytes,uint8,uint256,uint256,bytes32,bool,uint256,uint256))",
  "function failEnclave(address,address,uint256)",
  "function forceOverrideVerify(address)",
  "function isEnclaveValid(address) view returns (bool)",
  "function rotateEnclaveSigner(address,address)",
  "function updateEnclave(address,bytes) payable",
  "function validate(address,address,bytes32[]) view",
  "function verifyEnclave(address,address,uint256,uint256,bytes32)",
  "error AlreadyExecuted(bytes32)",
  "error AttestationQueueDoesNotExist(address)",
  "error FunctionAlreadyExists(address)",
  "error FunctionCallerNotPermitted(address,address)",
  "error FunctionDoesNotExist(address)",
  "error FunctionFeeTooLow(address,uint256,uint256)",
  "error FunctionIncorrectTarget(address,address)",
  "error FunctionMrEnclaveMismatch(bytes32,bytes32)",
  "error FunctionSignerAlreadySet(address,address)",
  "error GasLimitExceeded(uint256,uint256)",
  "error InsufficientNodes(uint256,uint256)",
  "error InvalidSignature(address,bytes32,bytes)",
  "error OracleAlreadyExists(address)",
  "error OracleNotAtQueueIdx(address,address,uint256)",
  "error OracleNotOnQueue(address,address)",
  "error OracleQueueDoesNotExist(address)",
  "error TransactionExpired(uint256)",
  "event FunctionCallEvent(address indexed,address indexed,address indexed,bytes)",
  "event FunctionCallFund(address indexed,address indexed,uint256 indexed)",
  "function callFunction(address,bytes) payable returns (address)",
  "function functionCallSettings(address) view returns (tuple(bool,uint256,uint256,bool,bool))",
  "function functionCalls(address) view returns (tuple(address,address,uint256,bytes,bool,uint256,uint256))",
  "function getActiveFunctionCallsByQueue(address) view returns (address[], tuple(address,address,uint256,bytes,bool,uint256,uint256)[])",
  "function setFunctionCallSettings(address,bool,uint256,uint256,bool,bool)",
  "event OracleAccountInit(address indexed,address indexed)",
  "event OracleGC(address indexed,address indexed)",
  "event OracleHeartbeat(address indexed)",
  "event OracleRotateSigner(address indexed,address indexed,address indexed)",
  "event OracleSetConfig(address indexed,string,address indexed,address indexed,address)",
  "function createOracle(string,address,address,address)",
  "function createOracleWithId(address,string,address,address,address)",
  "function oracleGarbageCollect(address,uint256)",
  "function oracleHeartbeat(address)",
  "function oracles(address) view returns (tuple(string,address,uint8,uint256,address,address))",
  "function rotateOracleSigner(address,address)",
  "function setOracleConfig(address,string,address,address,address)",
  "event OracleQueueAccountInit(address indexed,address indexed)",
  "event OracleQueueAddMrEnclave(address indexed,address indexed,bytes32)",
  "event OracleQueueRemoveMrEnclave(address indexed,address indexed,bytes32)",
  "event OracleQueueSetAttestationConfig(address indexed,address indexed)",
  "event OracleQueueSetConfig(address indexed,address indexed)",
  "event OracleQueueSetPermission(address indexed,address indexed,address indexed,uint256)",
  "function addMrEnclaveToOracleQueue(address,bytes32)",
  "function createOracleQueue(string,address,bool,uint256,uint256,uint256)",
  "function getOracleIdx(address) view returns (int256)",
  "function getOracleQueueAllowedMrEnclaves(address) view returns (bytes32[])",
  "function getOracles(address) view returns (address[])",
  "function oracleQueues(address) view returns (tuple(string,address,address[],bool,uint256,uint256,uint256,uint256,uint256))",
  "function queueAttestationConfigs(address) view returns (tuple(address,bytes32[],bool,bool))",
  "function removeMrEnclaveFromOracleQueue(address,bytes32)",
  "function setOracleQueueAttestationConfig(address,address,bytes32[],bool,bool)",
  "function setOracleQueueConfig(address,string,address,bool,uint256,uint256,uint256)",
  "function setOracleQueuePermission(address,address,uint256,bool)",
  "function getPermission(address,address) view returns (uint256)",
  "function hasPermission(address,address,uint256) view returns (bool)",
  "error ECDSAInvalidSignature()",
  "error ECDSAInvalidSignatureLength(uint256)",
  "error ECDSAInvalidSignatureS(bytes32)",
  "event FunctionAccountInit(address indexed,address indexed)",
  "event FunctionFund(address indexed,address indexed,uint256 indexed)",
  "event FunctionWithdraw(address indexed,address indexed,uint256 indexed)",
  "function createFunction(string,address,address,string,string,string,string,string,address[]) payable",
  "function createFunctionWithId(address,string,address,address,string,string,string,string,string,address[]) payable",
  "function forward(tuple(uint256,uint256,uint256,address,address,bytes)[],bytes[]) payable",
  "function functionEscrowFund(address) payable",
  "function functionEscrowWithdraw(address,address,uint256)",
  "function functionVerify(uint256,address,address,uint256,uint256,bool,bytes32,tuple(uint256,uint256,uint256,address,address,bytes)[],bytes[])",
  "function functionVerifyRequest(uint256,address,address,uint256,uint256,bool,bytes32,tuple(uint256,uint256,uint256,address,address,bytes)[],bytes[],address[])",
  "function setFunctionConfig(address,string,address,string,string,string,string,string,address[])",
  "function setFunctionDeactivated(address)",
  "function setToleratedTimestampDiscrepancy(uint256)",
  "function addMrEnclaveToFunction(address,bytes32)",
  "function removeMrEnclaveFromFunction(address,bytes32)",
  "function estimatedRunCost(address,uint256) view returns (uint256)",
  "function funcs(address) view returns (tuple(string,address,address,address,uint256,uint8,tuple(string,address[],string,string,string,string,bytes32[],bool,bool),tuple(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)))",
  "function functionExists(address) view returns (bool)",
  "function getActiveFunctionsByQueue(address) view returns (address[], tuple(string,address,address,address,uint256,uint8,tuple(string,address[],string,string,string,string,bytes32[],bool,bool),tuple(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256))[])",
  "function getAllFunctions() view returns (address[], tuple(string,address,address,address,uint256,uint8,tuple(string,address[],string,string,string,string,bytes32[],bool,bool),tuple(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256))[])",
  "function getFunctionMrEnclaves(address) view returns (bytes32[])",
  "function getFunctionPermittedCallers(address) view returns (address[])",
  "function getFunctionsByAuthority(address) view returns (address[], tuple(string,address,address,address,uint256,uint8,tuple(string,address[],string,string,string,string,bytes32[],bool,bool),tuple(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256))[])",
  "function getTransactionHash(uint256,uint256,uint256,address,address,bytes) view returns (bytes32)",
  "function isTrustedForwarder(address) pure returns (bool)"
]
