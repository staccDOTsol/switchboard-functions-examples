{% set arch_libdir = "/lib/x86_64-linux-gnu" %}
{% set log_level = "error" %}

loader.entrypoint = "file:{{ gramine.libos }}"
libos.entrypoint = "/app/qvn"

loader.log_level = "{{ log_level }}"

loader.env.LD_LIBRARY_PATH = "/usr/lib:/lib:{{ arch_libdir }}:/usr/lib:/usr/{{ arch_libdir }}"
loader.env.PATH = "/bin:/usr/bin"

loader.env.CHAIN = { passthrough = true }
loader.env.QUEUE = { passthrough = true }
loader.env.RPC_URL = { passthrough = true }
loader.env.PAYER_SECRET = { passthrough = true }
loader.env.GOOGLE_PAYER_SECRET_PATH = { passthrough = true }
loader.env.GOOGLE_APPLICATION_CREDENTIALS = { passthrough = true }
loader.env.AZDCAP_COLLATERAL_VERSION = { passthrough = true }
loader.env.AZDCAP_DEBUG_LOG_LEVEL = { passthrough = true }
loader.env.CHAIN_ID = { passthrough = true }
loader.env.CONTRACT_ADDRESS = { passthrough = true }
loader.env.FUNDING_AMOUNT = { passthrough = true }
loader.env.FUNDING_THRESHOLD = { passthrough = true }
loader.env.WSS_RPC_URL = { passthrough = true }
loader.env.IPFS_URL = { passthrough = true }
loader.env.IPFS_KEY = { passthrough = true }
loader.env.IPFS_SECRET = { passthrough = true }
loader.env.QUOTE_KEY = { passthrough = true }
loader.env.HEARTBEAT_INTERVAL = { passthrough = true }
#loader.env.RES_OPTIONS = { passthrough = true }


fs.mounts = [
  { uri = "file:{{ gramine.runtimedir() }}", path = "/lib" },
  { uri = "file:{{ arch_libdir }}", path = "{{ arch_libdir }}" },
  { uri = "file:/usr", path = "/usr" },
  { uri = "file:/lib64", path = "/lib64" },
  { uri = "file:/app", path = "/app" },
  { uri = "file:/etc/ssl/certs", path = "/etc/ssl/certs" },
  { uri = "file:/usr/lib/ssl/certs", path = "/usr/lib/ssl/certs" },
  { uri = "file:/home/credentials/gcp-sa.json", path = "/home/credentials/gcp-sa.json" },
  # Key options:
  # _sgx_mrenclave, anyone with the same enclave signature can unseal
  # _sgx_mrsigner, only the same physical machine AND running the same image can seal/unseal
  { type = "encrypted", uri = "file:/data/protected_files", path = "/data/protected_files", key_name = "_sgx_mrenclave" },
  { path = "/etc", uri = "file:/etc" },
]

loader.pal_internal_mem_size = "128K"

sgx.nonpie_binary = true
# FORCE ENABLE THIS FOR FASTER BOOT
sgx.edmm_enable = {{ 'true' if env.get('EDMM', '0') == '1' else 'false' }}
sgx.max_threads = 128
sgx.remote_attestation = "dcap"
sgx.enclave_size = "1G"

# https://gramine.readthedocs.io/en/stable/performance.html#glibc-malloc-tuning
loader.env.MALLOC_ARENA_MAX = "1"

# loader.env.RUST_BACKTRACE = "full"

# The Tokio runtime requires eventfd, and the Gramine implementation
# currently relies on the host in an insecure manner. This setting isn't
# suitable for production deployment, but works well as a stopgap during
# development while a proper implementation in Gramine is being worked on.
sys.insecure__allow_eventfd = true
sys.stack.size = "2048K"
sys.brk.max_size = "1024K"


sgx.trusted_files = [
  "file:{{ gramine.libos }}",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/",
  "file:/usr/{{ arch_libdir }}/",
  "file:/lib64/",
  "file:/usr/include/",
  "file:/etc/ssl/certs/",
  "file:/etc/sgx_default_qcnl.conf",
  "file:/etc/ld.so.cache",
  "file:/usr/lib/ssl/certs/",
  "file:/usr/lib/ssl/openssl.cnf",
  "file:/app/qvn",
]

#sgx.file_check_policy = "allow_all_but_log"

sgx.allowed_files = [
  "file:/etc/hosts",
  "file:/etc/host.conf",
  "file:/etc/gai.conf",
  "file:/etc/resolv.conf",
  "file:/etc/localtime",
  "file:/etc/nsswitch.conf",
  "file:/home/credentials/gcp-sa.json",
  "file:/data/protected_files/keypair.bin",
]

